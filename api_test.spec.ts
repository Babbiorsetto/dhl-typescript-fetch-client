/**
 * DHL Express APIs (MyDHL API)
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 
 *
 * OpenAPI spec version: 2.7.2
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AddressApi", () => {
  let instance: api.AddressApi
  beforeEach(function() {
    instance = new api.AddressApi(config)
  });

  test("expApiAddressValidate", () => {
    const type: string = "type_example"
    const countryCode: string = "countryCode_example"
    const postalCode: string = "postalCode_example"
    const cityName: string = "cityName_example"
    const countyName: string = "countyName_example"
    const strictValidation: boolean = true
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiAddressValidate(type, countryCode, postalCode, cityName, countyName, strictValidation, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
})

describe("IdentifierApi", () => {
  let instance: api.IdentifierApi
  beforeEach(function() {
    instance = new api.IdentifierApi(config)
  });

  test("expApiIdentifiers", () => {
    const accountNumber: string = "accountNumber_example"
    const type: string = "type_example"
    const size: string = "size_example"
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiIdentifiers(accountNumber, type, size, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
})

describe("InvoiceApi", () => {
  let instance: api.InvoiceApi
  beforeEach(function() {
    instance = new api.InvoiceApi(config)
  });

  test("expApiShipmentsInvoiceData", () => {
    const body: api.SupermodelIoLogisticsExpressUploadInvoiceDataRequestSID = {
  "$ref" : "#/components/examples/commercialInvoiceDataRequest"
}
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiShipmentsInvoiceData(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
})

describe("PickupApi", () => {
  let instance: api.PickupApi
  beforeEach(function() {
    instance = new api.PickupApi(config)
  });

  test("expApiPickups", () => {
    const body: api.SupermodelIoLogisticsExpressPickupRequest = {
  "$ref" : "#/components/examples/nonDocRequestPickup"
}
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiPickups(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
  test("expApiPickupsCancel", () => {
    const dispatchConfirmationNumber: string = "dispatchConfirmationNumber_example"
    const requestorName: string = "requestorName_example"
    const reason: string = "reason_example"
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiPickupsCancel(dispatchConfirmationNumber, requestorName, reason, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
  test("expApiPickupsUpdate", () => {
    const body: api.SupermodelIoLogisticsExpressUpdatePickupRequest = undefined
    const dispatchConfirmationNumber: string = "dispatchConfirmationNumber_example"
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiPickupsUpdate(body, dispatchConfirmationNumber, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
})

describe("ProductApi", () => {
  let instance: api.ProductApi
  beforeEach(function() {
    instance = new api.ProductApi(config)
  });

  test("expApiProducts", () => {
    const accountNumber: string = "accountNumber_example"
    const originCountryCode: string = "originCountryCode_example"
    const originCityName: string = "originCityName_example"
    const destinationCountryCode: string = "destinationCountryCode_example"
    const destinationCityName: string = "destinationCityName_example"
    const weight: number = 1.2
    const length: number = 1.2
    const width: number = 1.2
    const height: number = 1.2
    const plannedShippingDate: string = "plannedShippingDate_example"
    const isCustomsDeclarable: boolean = true
    const unitOfMeasurement: string = "unitOfMeasurement_example"
    const originPostalCode: string = "originPostalCode_example"
    const destinationPostalCode: string = "destinationPostalCode_example"
    const nextBusinessDay: boolean = true
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    const strictValidation: boolean = true
    const getAllValueAddedServices: boolean = true
    const requestEstimatedDeliveryDate: boolean = true
    const estimatedDeliveryDateType: string = "estimatedDeliveryDateType_example"
    return expect(instance.expApiProducts(accountNumber, originCountryCode, originCityName, destinationCountryCode, destinationCityName, weight, length, width, height, plannedShippingDate, isCustomsDeclarable, unitOfMeasurement, originPostalCode, destinationPostalCode, nextBusinessDay, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, strictValidation, getAllValueAddedServices, requestEstimatedDeliveryDate, estimatedDeliveryDateType, {})).resolves.toBe(null)
  })
})

describe("RatingApi", () => {
  let instance: api.RatingApi
  beforeEach(function() {
    instance = new api.RatingApi(config)
  });

  test("expApiLandedCost", () => {
    const body: api.SupermodelIoLogisticsExpressLandedCostRequest = {
  "$ref" : "#/components/examples/nonDocInternationalShipmentLandedCost"
}
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiLandedCost(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
  test("expApiRates", () => {
    const accountNumber: string = "accountNumber_example"
    const originCountryCode: string = "originCountryCode_example"
    const originCityName: string = "originCityName_example"
    const destinationCountryCode: string = "destinationCountryCode_example"
    const destinationCityName: string = "destinationCityName_example"
    const weight: number = 1.2
    const length: number = 1.2
    const width: number = 1.2
    const height: number = 1.2
    const plannedShippingDate: string = "plannedShippingDate_example"
    const isCustomsDeclarable: boolean = true
    const unitOfMeasurement: string = "unitOfMeasurement_example"
    const originPostalCode: string = "originPostalCode_example"
    const destinationPostalCode: string = "destinationPostalCode_example"
    const nextBusinessDay: boolean = true
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    const strictValidation: boolean = true
    const getAllValueAddedServices: boolean = true
    const requestEstimatedDeliveryDate: boolean = true
    const estimatedDeliveryDateType: string = "estimatedDeliveryDateType_example"
    return expect(instance.expApiRates(accountNumber, originCountryCode, originCityName, destinationCountryCode, destinationCityName, weight, length, width, height, plannedShippingDate, isCustomsDeclarable, unitOfMeasurement, originPostalCode, destinationPostalCode, nextBusinessDay, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, strictValidation, getAllValueAddedServices, requestEstimatedDeliveryDate, estimatedDeliveryDateType, {})).resolves.toBe(null)
  })
  test("expApiRatesMany", () => {
    const body: api.SupermodelIoLogisticsExpressRateRequest = {
  "$ref" : "#/components/examples/nonDocInternationalShipmentRates"
}
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    const strictValidation: boolean = true
    return expect(instance.expApiRatesMany(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, strictValidation, {})).resolves.toBe(null)
  })
})

describe("ShipmentApi", () => {
  let instance: api.ShipmentApi
  beforeEach(function() {
    instance = new api.ShipmentApi(config)
  });

  test("expApiShipments", () => {
    const body: api.SupermodelIoLogisticsExpressCreateShipmentRequest = {
  "$ref" : "#/components/examples/nonDocInternationalShipment"
}
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    const strictValidation: boolean = true
    const bypassPLTError: boolean = true
    return expect(instance.expApiShipments(body, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, strictValidation, bypassPLTError, {})).resolves.toBe(null)
  })
  test("expApiShipmentsDocumentimage", () => {
    const shipmentTrackingNumber: string = "shipmentTrackingNumber_example"
    const shipperAccountNumber: string = "shipperAccountNumber_example"
    const typeCode: string = "typeCode_example"
    const pickupYearAndMonth: string = "pickupYearAndMonth_example"
    const encodingFormat: string = "encodingFormat_example"
    const allInOnePDF: boolean = true
    const compressedPackage: boolean = true
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiShipmentsDocumentimage(shipmentTrackingNumber, shipperAccountNumber, typeCode, pickupYearAndMonth, encodingFormat, allInOnePDF, compressedPackage, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
  test("expApiShipmentsEpod", () => {
    const shipmentTrackingNumber: string = "shipmentTrackingNumber_example"
    const shipperAccountNumber: string = "shipperAccountNumber_example"
    const content: string = "content_example"
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiShipmentsEpod(shipmentTrackingNumber, shipperAccountNumber, content, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
  test("expApiShipmentsImgUpload", () => {
    const body: api.SupermodelIoLogisticsExpressImageUploadRequest = undefined
    const shipmentTrackingNumber: string = "shipmentTrackingNumber_example"
    return expect(instance.expApiShipmentsImgUpload(body, shipmentTrackingNumber, {})).resolves.toBe(null)
  })
  test("expApiShipmentsInvoiceDataAwb", () => {
    const body: api.SupermodelIoLogisticsExpressUploadInvoiceDataRequest = undefined
    const shipmentTrackingNumber: string = "shipmentTrackingNumber_example"
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiShipmentsInvoiceDataAwb(body, shipmentTrackingNumber, messageReference, messageReferenceDate, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
})

describe("TrackingApi", () => {
  let instance: api.TrackingApi
  beforeEach(function() {
    instance = new api.TrackingApi(config)
  });

  test("expApiShipmentsTracking", () => {
    const shipmentTrackingNumber: string = "shipmentTrackingNumber_example"
    const trackingView: string = "trackingView_example"
    const levelOfDetail: string = "levelOfDetail_example"
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiShipmentsTracking(shipmentTrackingNumber, trackingView, levelOfDetail, messageReference, messageReferenceDate, acceptLanguage, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
  test("expApiShipmentsTrackingMulti", () => {
    const shipmentTrackingNumber: Array<string> = undefined
    const pieceTrackingNumber: Array<string> = undefined
    const shipmentReference: string = "shipmentReference_example"
    const shipmentReferenceType: string = "shipmentReferenceType_example"
    const shipperAccountNumber: string = "shipperAccountNumber_example"
    const dateRangeFrom: string = "dateRangeFrom_example"
    const dateRangeTo: string = "dateRangeTo_example"
    const trackingView: string = "trackingView_example"
    const levelOfDetail: string = "levelOfDetail_example"
    const messageReference: string = "messageReference_example"
    const messageReferenceDate: string = "messageReferenceDate_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const pluginName: string = "pluginName_example"
    const pluginVersion: string = "pluginVersion_example"
    const shippingSystemPlatformName: string = "shippingSystemPlatformName_example"
    const shippingSystemPlatformVersion: string = "shippingSystemPlatformVersion_example"
    const webstorePlatformName: string = "webstorePlatformName_example"
    const webstorePlatformVersion: string = "webstorePlatformVersion_example"
    return expect(instance.expApiShipmentsTrackingMulti(shipmentTrackingNumber, pieceTrackingNumber, shipmentReference, shipmentReferenceType, shipperAccountNumber, dateRangeFrom, dateRangeTo, trackingView, levelOfDetail, messageReference, messageReferenceDate, acceptLanguage, pluginName, pluginVersion, shippingSystemPlatformName, shippingSystemPlatformVersion, webstorePlatformName, webstorePlatformVersion, {})).resolves.toBe(null)
  })
})

